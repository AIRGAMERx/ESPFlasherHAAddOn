{
  "Template Sensoren": {
    "Calculation": {
      "platform": "template",
      "sensor_class": "template",
      "werte": [
        "Calculated value based on other sensors"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "unit_of_measurement",
        "accuracy_decimals",
        "device_class",
        "state_class",
        "icon",
        "update_interval"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Calculated temperature"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "return (id(temp1).state + id(temp2).state) / 2;"
        },
        "unit_of_measurement": {
          "type": "ComboBox",
          "values": [
            "°C",
            "°F",
            "%",
            "V",
            "A",
            "W",
            "kWh",
            "hPa",
            "ppm",
            "lux",
            "m",
            "cm",
            "mm"
          ]
        },
        "device_class": {
          "type": "ComboBox",
          "values": [
            "temperature",
            "humidity",
            "pressure",
            "voltage",
            "current",
            "power",
            "energy",
            "illuminance",
            "distance",
            "speed"
          ]
        },
        "state_class": {
          "type": "ComboBox",
          "values": [
            "measurement",
            "total_increasing",
            "total"
          ]
        },
        "accuracy_decimals": {
          "type": "NumericUpDown",
          "min": 0,
          "max": 5,
          "step": 1
        },
        "update_interval": {
          "type": "ComboBox",
          "values": [
            "1s",
            "5s",
            "10s",
            "30s",
            "1min",
            "5min",
            "15min",
            "never"
          ]
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:thermometer"
        }
      },
      "info": [
        "Virtual sensor",
        "Lambda function required",
        "References other sensors"
      ],
      "lambda_examples": [
        "// Average: return (id(temp1).state + id(temp2).state) / 2;",
        "// Fahrenheit to Celsius: return (id(temp_f).state - 32) * 5/9;",
        "// Difference: return id(temp_out).state - id(temp_in).state;",
        "// Maximum: return max(id(temp1).state, id(temp2).state);"
      ]
    },
    "Conversion": {
      "platform": "template",
      "sensor_class": "sensor",
      "werte": [
        "Unit conversion (F to C, bar to psi, etc.)"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "unit_of_measurement",
        "accuracy_decimals",
        "icon"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Temperature in Fahrenheit"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "return id(temp_celsius).state * 9/5 + 32;"
        },
        "unit_of_measurement": {
          "type": "ComboBox",
          "values": [
            "°F",
            "°C",
            "bar",
            "psi",
            "mph",
            "km/h",
            "in",
            "ft",
            "gal",
            "l"
          ]
        },
        "accuracy_decimals": {
          "type": "NumericUpDown",
          "min": 0,
          "max": 3,
          "step": 1
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:thermometer-lines"
        }
      },
      "info": [
        "Unit conversion",
        "For different measurement units"
      ],
      "lambda_examples": [
        "// Celsius to Fahrenheit: return id(temp_c).state * 9/5 + 32;",
        "// Meters to feet: return id(distance_m).state * 3.28084;",
        "// Bar to PSI: return id(pressure_bar).state * 14.5038;",
        "// km/h to mph: return id(speed_kmh).state * 0.621371;"
      ]
    },
    "Time_based": {
      "platform": "template",
      "sensor_class": "sensor",
      "werte": [
        "Time-based values (hour, day, etc.)"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "unit_of_measurement",
        "accuracy_decimals",
        "update_interval"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Current hour"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "return id(sntp_time).now().hour;"
        },
        "unit_of_measurement": {
          "type": "ComboBox",
          "values": [
            "h",
            "min",
            "s",
            "d",
            ""
          ]
        },
        "accuracy_decimals": {
          "type": "NumericUpDown",
          "min": 0,
          "max": 2,
          "step": 1
        },
        "update_interval": {
          "type": "ComboBox",
          "values": [
            "1min",
            "5min",
            "15min",
            "1h"
          ]
        }
      },
      "info": [
        "Requires time component",
        "For time-based logic"
      ],
      "lambda_examples": [
        "// Current hour: return id(sntp_time).now().hour;",
        "// Day of week (1=Mon): return id(sntp_time).now().day_of_week;",
        "// Day of month: return id(sntp_time).now().day_of_month;",
        "// Minutes since midnight: return id(sntp_time).now().hour * 60 + id(sntp_time).now().minute;"
      ]
    },
    "Statistics": {
      "platform": "template",
      "sensor_class": "sensor",
      "werte": [
        "Statistical evaluations (Min, Max, Trend)"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "unit_of_measurement",
        "accuracy_decimals",
        "update_interval"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Temperature Trend"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "static float last_temp = 20.0;\nfloat current = id(temperature).state;\nfloat trend = current - last_temp;\nlast_temp = current;\nreturn trend;"
        },
        "unit_of_measurement": {
          "type": "ComboBox",
          "values": [
            "°C/h",
            "%/min",
            "trend",
            ""
          ]
        },
        "accuracy_decimals": {
          "type": "NumericUpDown",
          "min": 0,
          "max": 3,
          "step": 1
        },
        "update_interval": {
          "type": "ComboBox",
          "values": [
            "30s",
            "1min",
            "5min",
            "15min"
          ]
        }
      },
      "info": [
        "Advanced lambda functions",
        "Static variables possible"
      ],
      "lambda_examples": [
        "// Calculate trend: static float last = 0; float diff = id(sensor).state - last; last = id(sensor).state; return diff;",
        "// Average of 3 values: return (id(s1).state + id(s2).state + id(s3).state) / 3;",
        "// Difference to yesterday: return id(today).state - id(yesterday).state;"
      ]
    }
  },
  "Template Number": {
    "Setpoint": {
      "platform": "template",
      "sensor_class": "number",
      "werte": [
        "Control/target value from UI"
      ],
      "required": [
        "name",
        "min_value",
        "max_value",
        "step"
      ],
      "optional": [
        "initial_value",
        "optimistic",
        "unit_of_measurement",
        "lambda"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Target temperature"
        },
        "min_value": {
          "type": "NumericUpDown",
          "min": -1000,
          "max": 1000,
          "step": 0.1
        },
        "max_value": {
          "type": "NumericUpDown",
          "min": -1000,
          "max": 1000,
          "step": 0.1
        },
        "step": {
          "type": "NumericUpDown",
          "min": 0.01,
          "max": 100,
          "step": 0.01
        },
        "initial_value": {
          "type": "NumericUpDown",
          "min": -1000,
          "max": 1000,
          "step": 0.1
        },
        "unit_of_measurement": {
          "type": "ComboBox",
          "values": [
            "°C",
            "V",
            "A",
            "W",
            "%",
            ""
          ]
        },
        "optimistic": {
          "type": "CheckBox"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "id(target).publish_state(x);"
        }
      },
      "info": [
        "Virtual number for control purposes",
        "Ideal for thresholds, offsets"
      ]
    }
  },
  "Template Select": {
    "OperatingMode": {
      "platform": "template",
      "sensor_class": "select",
      "werte": [
        "Selection of modes"
      ],
      "required": [
        "name",
        "options"
      ],
      "optional": [
        "initial_option",
        "optimistic",
        "lambda"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Mode"
        },
        "options": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "- Auto\n- Manual\n- Off"
        },
        "initial_option": {
          "type": "TextBox",
          "placeholder": "Auto"
        },
        "optimistic": {
          "type": "CheckBox"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "if (x == \"Auto\") { /* ... */ }"
        }
      },
      "info": [
        "Virtual mode selection",
        "Good for profiles/strategies"
      ]
    }
  },
  "Template Button": {
    "Action": {
      "platform": "template",
      "sensor_class": "button",
      "werte": [
        "One-time action from UI"
      ],
      "required": [
        "name",
        "press_action"
      ],
      "optional": [
        "icon"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Calibrate"
        },
        "press_action": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "- logger.log: \"Calibrating...\"\n- sensor.template.publish:\n    id: offset\n    state: 0"
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:gesture-tap-button"
        }
      },
      "info": [
        "Virtual button",
        "Triggers an action"
      ]
    }
  },
  "Template Cover": {
    "Virtual_Blind": {
      "platform": "template",
      "sensor_class": "cover",
      "werte": [
        "Open/Close/Stop & Position"
      ],
      "required": [
        "name",
        "open_action",
        "close_action",
        "stop_action"
      ],
      "optional": [
        "assumed_state",
        "lambda_position",
        "lambda_tilt"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Living Room Blind"
        },
        "open_action": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "- switch.turn_on: up_relay"
        },
        "close_action": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "- switch.turn_on: down_relay"
        },
        "stop_action": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "- switch.turn_off: up_relay\n- switch.turn_off: down_relay"
        },
        "assumed_state": {
          "type": "CheckBox"
        },
        "lambda_position": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "// return 0.0..1.0 based on runtime"
        },
        "lambda_tilt": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "// optional for slats"
        }
      },
      "info": [
        "Virtual cover",
        "Position optionally via logic"
      ]
    }
  },
  "Template Binary Sensors": {
    "Threshold": {
      "platform": "template",
      "sensor_class": "binary_sensor",
      "werte": [
        "Threshold monitoring (greater/less than)"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "device_class",
        "icon"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Temperature too high"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "return id(temperature).state > 25.0;"
        },
        "device_class": {
          "type": "ComboBox",
          "values": [
            "problem",
            "safety",
            "heat",
            "cold",
            "moisture",
            "motion",
            "door",
            "window",
            "garage_door",
            "opening"
          ]
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:thermometer-alert"
        }
      },
      "info": [
        "Monitoring of limit values",
        "Returns true/false"
      ],
      "lambda_examples": [
        "// Temperature above 25°C: return id(temp).state > 25.0;",
        "// Humidity below 30%: return id(humidity).state < 30.0;",
        "// Voltage within range: return id(voltage).state >= 3.0 && id(voltage).state <= 3.6;",
        "// Sensor unavailable: return isnan(id(sensor).state);"
      ]
    },
    "Time_State": {
      "platform": "template",
      "sensor_class": "binary_sensor",
      "werte": [
        "Time-based states (day/night, weekday)"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "device_class",
        "icon"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Night mode"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "auto time = id(sntp_time).now();\nreturn time.hour >= 22 || time.hour <= 6;"
        },
        "device_class": {
          "type": "ComboBox",
          "values": [
            "light",
            "motion",
            "occupancy",
            "presence",
            "running",
            ""
          ]
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:weather-night"
        }
      },
      "info": [
        "Time component required",
        "For time-controlled automation"
      ],
      "lambda_examples": [
        "// Night (22-6): auto t = id(sntp_time).now(); return t.hour >= 22 || t.hour <= 6;",
        "// Weekday (Mon-Fri): auto t = id(sntp_time).now(); return t.day_of_week >= 1 && t.day_of_week <= 5;",
        "// Working hours: auto t = id(sntp_time).now(); return t.hour >= 8 && t.hour <= 17;",
        "// Weekend: auto t = id(sntp_time).now(); return t.day_of_week == 6 || t.day_of_week == 7;"
      ]
    },
    "Combination": {
      "platform": "template",
      "sensor_class": "binary_sensor",
      "werte": [
        "Combined conditions (AND/OR logic)"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "device_class",
        "icon"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Optimal conditions"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "return id(temp).state > 20.0 && id(temp).state < 25.0 && id(humidity).state > 40.0;"
        },
        "device_class": {
          "type": "ComboBox",
          "values": [
            "problem",
            "safety",
            "running",
            "heat",
            "cold",
            "moisture",
            ""
          ]
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:check-circle"
        }
      },
      "info": [
        "Combine multiple conditions",
        "Logical operators: &&, ||, !"
      ],
      "lambda_examples": [
        "// All conditions: return id(temp).state > 20 && id(hum).state < 60 && id(light).state;",
        "// One of several: return id(motion1).state || id(motion2).state || id(door).state;",
        "// NOT condition: return !id(rain_sensor).state && id(wind).state < 10;",
        "// Complex: return (id(temp).state > 20 && id(hum).state < 70) || id(manual_override).state;"
      ]
    },
    "GPIO_Button": {
      "platform": "template",
      "sensor_class": "binary_sensor",
      "werte": [
        "Virtual button based on GPIO"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "device_class",
        "icon",
        "on_press",
        "on_release"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Living room button"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "return id(gpio_pin_0).state;"
        },
        "device_class": {
          "type": "ComboBox",
          "values": [
            "button",
            "door",
            "window",
            "garage_door",
            "opening"
          ]
        },
        "on_press": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "- switch.toggle: relay1\n- logger.log: \"Button pressed\""
        },
        "on_release": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "- logger.log: \"Button released\""
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:gesture-tap"
        }
      },
      "info": [
        "References GPIO binary sensor",
        "Template for advanced logic"
      ],
      "lambda_examples": [
        "// Read GPIO state: return id(gpio_button).state;",
        "// Inverted: return !id(gpio_button).state;",
        "// With debounce: static bool last = false; bool current = id(gpio_button).state; if (current != last) { last = current; return current; } return false;"
      ]
    },
    "State_Change": {
      "platform": "template",
      "sensor_class": "binary_sensor",
      "werte": [
        "Detecting changes (rising/falling)"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "device_class",
        "icon"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Temperature rising"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "static float last_temp = 20.0;\nfloat current = id(temperature).state;\nbool rising = current > last_temp + 0.5;\nlast_temp = current;\nreturn rising;"
        },
        "device_class": {
          "type": "ComboBox",
          "values": [
            "motion",
            "problem",
            "running",
            "heat",
            "cold",
            ""
          ]
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:trending-up"
        }
      },
      "info": [
        "Static variables for comparison",
        "Trend detection"
      ],
      "lambda_examples": [
        "// Rising: static float last = 0; bool up = id(sensor).state > last + 1; last = id(sensor).state; return up;",
        "// Rapid change: static float last = 0; bool fast = abs(id(sensor).state - last) > 5; last = id(sensor).state; return fast;",
        "// Over time: static uint32_t last_time = 0; if (millis() - last_time > 60000) { last_time = millis(); return true; } return false;"
      ]
    }
  },
  "Template Text Sensors": {
    "Status_Text": {
      "platform": "template",
      "sensor_class": "text_sensor",
      "werte": [
        "Textual status messages"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "icon",
        "update_interval"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "System Status"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "if (id(temp).state > 30) return \"Hot\";\nelse if (id(temp).state > 20) return \"Warm\";\nelse return \"Cold\";"
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:information"
        },
        "update_interval": {
          "type": "ComboBox",
          "values": [
            "5s",
            "10s",
            "30s",
            "1min",
            "5min"
          ]
        }
      },
      "info": [
        "Textual output",
        "Conditional text based on sensors"
      ],
      "lambda_examples": [
        "// Evaluate state: if (id(temp).state > 25) return \"Hot\"; return \"OK\";",
        "// Multiple conditions: if (id(temp).state > 30) return \"Too hot\"; else if (id(temp).state < 10) return \"Too cold\"; return \"Optimal\";",
        "// Time text: auto t = id(sntp_time).now(); return t.strftime(\"%H:%M\");",
        "// Sensor combination: return \"T:\" + to_string(id(temp).state) + \"°C H:\" + to_string(id(hum).state) + \"%\";"
      ]
    },
    "Formatting": {
      "platform": "template",
      "sensor_class": "text_sensor",
      "werte": [
        "Formatted sensor values as text"
      ],
      "required": [
        "name",
        "lambda"
      ],
      "optional": [
        "icon",
        "update_interval"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Formatted temperature"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "return \"Temperature: \" + to_string(id(temp).state) + \"°C\";"
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:format-text"
        },
        "update_interval": {
          "type": "ComboBox",
          "values": [
            "5s",
            "10s",
            "30s",
            "1min"
          ]
        }
      },
      "info": [
        "Text formatting",
        "Sensor data as string"
      ],
      "lambda_examples": [
        "// Simple: return to_string(id(temp).state) + \"°C\";",
        "// With description: return \"Current: \" + to_string(id(temp).state) + \"°C\";",
        "// Multiple values: return \"T:\" + to_string(id(temp).state) + \" H:\" + to_string(id(hum).state);",
        "// Timestamp: auto t = id(sntp_time).now(); return \"Measured at \" + t.strftime(\"%H:%M\");"
      ]
    }
  },
  "Template Switches": {
    "Logic_Switch": {
      "platform": "template",
      "sensor_class": "switch",
      "werte": [
        "Virtual switch with custom logic"
      ],
      "required": [
        "name",
        "turn_on_action",
        "turn_off_action"
      ],
      "optional": [
        "lambda",
        "optimistic",
        "assumed_state",
        "icon"
      ],
      "baseconfig": [
        "disabled_by_default"
      ],
      "disable_by_default": [
        "True",
        "False"
      ],
      "ui_fields": {
        "name": {
          "type": "TextBox",
          "placeholder": "Master Switch"
        },
        "turn_on_action": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "- switch.turn_on: relay1\n- switch.turn_on: relay2"
        },
        "turn_off_action": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "- switch.turn_off: relay1\n- switch.turn_off: relay2"
        },
        "lambda": {
          "type": "TextBox",
          "multiline": true,
          "placeholder": "return id(relay1).state && id(relay2).state;"
        },
        "optimistic": {
          "type": "CheckBox"
        },
        "assumed_state": {
          "type": "CheckBox"
        },
        "icon": {
          "type": "TextBox",
          "placeholder": "mdi:power"
        }
      },
      "info": [
        "Virtual switch",
        "Controls other components"
      ],
      "lambda_examples": [
        "// State from another: return id(relay1).state;",
        "// Combined: return id(relay1).state && id(relay2).state;",
        "// Condition: return id(temp).state > 25.0;"
      ]
    }
  }
}